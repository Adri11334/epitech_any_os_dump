#!/bin/bash

# variables

## script

files="./.files"
dir_tmp="/tmp/install"

login=$1

always=0
reboot=0

## fake install ?

fake=0

## colors

ESC="\033["
C_RED=$ESC"0;31m"
C_YELLOW=$ESC"0;33m"
C_BWHITE=$ESC"1;37m"
C_RST=$ESC"0m"


function usage
{
    echo
    echo "Usage: $0 <prenom.nom@epitech.eu>"
    echo
    echo "<prenom.nom@epitech.eu> : Votre login Epitech"
    echo
}

function line
{
    cols=$(tput cols)
    char=$1
    color=$2

    if test "$color" != ""; then
    echo -ne $color
    fi

    for i in $(eval echo "{1..$cols}"); do
    echo -n $char
    done
    echo

    if test "$color" != ""; then
    echo -ne $C_RST
    fi
}

function script_header
{
    color=$2
    if test "$color" = ""; then
        color=$C_RED
    fi

    echo -ne $color
    line "-"
    echo "##> "$1
    line "-"
    echo -ne $C_RST
}

function handle_error
{
    result=$1
    if test $result -eq 0; then
        return
    else
        line "#" $C_RED
        line "#" $C_YELLOW
        echo -en $C_RED"[Erreur]"$C_RST" lors de l'installation, voulez-vous arreter le script ? [O/n]  "
        read stop_script
        case $stop_script in
        n|N)    return;;
        *)      exit 1;;
    esac
    fi
}

function get_os_type
{
    which zypper &> /dev/null && os="opensuse"
    which pacman &> /dev/null && os="archlinux"
    which dnf &> /dev/null && os="fedora"
    which apt-get &> /dev/null && os="debian"
    which emerge &> /dev/null && os="gentoo"
}

function script_init
{
    os="void"
    get_os_type

    if test "$os" = "void"; then
        line "#" $C_YELLOW
        script_header "VOTRE DISTRIBUTION N'EST PAS SUPPORTÉE..."
        line "#" $C_YELLOW
        exit 42
    fi

    rm -rf $dir_tmp
    mkdir $dir_tmp
}

function sys_upgrade
{
    if test $fake -eq 1; then
        echo "Upgrade system"
        return
    fi
    case "$os" in
    opensuse)
        sudo zypper -y update
        ;;
    archlinux)
        sudo pacman --noconfirm -Syu
        ;;
    fedora)
        sudo dnf -y update
        ;;
    debian)
        sudo apt-get -y update; sudo apt-get -y upgrade
        ;;
    gentoo)
        sudo emerge -u world
        ;;
    esac
    handle_error $?
}

function sys_install
{
    package_name=$1

    function get_cmd_install
    {
    case "$os" in
        opensuse)
        echo "zypper -y install"
        ;;
        archlinux)
        echo "pacman --noconfirm -S"
        ;;
        fedora)
        echo "dnf -y install"
        ;;
        debian)
        echo "apt-get -y install"
        ;;
        gentoo)
        echo "emerge"
        ;;
    esac
    }

    if test -z "$cmd_install"; then
        cmd_install=$(get_cmd_install)
    fi

    if test $fake -eq 1; then
    echo "Installing" $package_name "(command:" $cmd_install $package_name ")"
    return
    fi

    sudo $cmd_install $package_name
    handle_error $?
}

function script_install
{
    if test $fake -eq 1; then
        echo "Installing" $1 "(script_install)"
        return
    fi
    sudo cp $files/$1 /usr/bin/$1
    handle_error $?
    sudo chmod 755 /usr/bin/$1
    handle_error $?
}

function setup_emacs
{
    if test $fake -eq 1; then
        echo "Setup emacs"
        return
    fi
    emacs_tmp=$dir_tmp/.emacs.d

    cp -r $files/.emacs.d $dir_tmp

    sed 's/(getenv "USER")/"'$login'"/g' $emacs_tmp/epitech/std_comment.el > $emacs_tmp/epitech/std_comment.el.tmp
    mv $emacs_tmp/epitech/std_comment.el.tmp $emacs_tmp/epitech/std_comment.el

    cp $files/.emacs /home/$USER/
    chmod +rw /home/$USER/.emacs

    cp -r $emacs_tmp /home/$USER/
    chmod +rw /home/$USER/.emacs.d
    chmod +rw /home/$USER/.emacs.d/*
}

if test $UID -eq 0; then
    echo ">> Ne pas lancer ce script en tant que sudo <<"
    usage
    exit 1
fi
if test -z "$login"; then
    usage
    exit 1
fi

script_init

script_header "1/20] MISE À JOUR DES PAQUETS DU SYSTÈME"
read -p "Mettre à jour le système ? [O/n]" yn
case $yn in
    [Nn]* );;
    * )
    sys_upgrade
    reboot=1
    ;;
esac

script_header "2/20] INSTALLATION DE BLIH"
read -p "Installer BLIH ? [O/n/a(lways)]" yn
case $yn in
    [Nn]* );;
    [Aa]* )
    always=1;;
    * )
    script_install blih
    ;;
esac

if test $always -eq 1; then
    script_header "2-20/20] INSTALLATION DE TOUS LES PAQUETS"
    script_install blih
    sys_install python3
    sys_install emacs
    setup_emacs

    sys_install gcc
    sys_install build-essential
    sys_install valgrind
    sys_install ocaml
    sys_install libncurses5
    sys_install curl
    sys_install git

    if test $fake -eq 0; then
        ssh-keygen
	handle_error $?
	echo "mot de passe UNIX (bocal, pour blih)"
	blih -u "$1" sshkey upload /home/$USER/.ssh/id_rsa.pub
	handle_error $?
    else
	echo "ssh-keygen"
    fi

    sys_install zsh
    if test $fake -eq 0; then
	echo "alias blih='blih -u $1'" >> /home/$USER/.zshrc
	echo "alias ns_auth='ns_auth -u $1'" >> /home/$USER/.zshrc
    fi

    if test $fake -eq 0; then
	curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh > oh-my-zsh.sh
	sed -i "s:env zsh:exit:g" oh-my-zsh.sh
	chmod 755 oh-my-zsh.sh
	./oh-my-zsh.sh
	rm oh-my-zsh.sh
	chsh $USER -s /usr/bin/zsh
	handle_error $?
    else
	echo "oh_my_zsh"
    fi

    if test $fake -eq 0; then
	sudo cp $files/google.1 /usr/share/man/man1/google.1
	handle_error $?
    else
	echo "man google"
    fi

    sys_install terminator
    sys_install tree
    sys_install filezilla

    if test $fake -eq 0; then
	sudo chmod +s /sbin/poweroff
	handle_error $?
	sudo chmod +s /sbin/reboot
	handle_error $?
    else
	echo "poweroff & reboot"
    fi

    sys_install ruby
    if test $fake -eq 0; then
	git clone https://github.com/kayofeld/makefile-gen.git
	cd makefile-gen
	sudo ./install.sh
	cd ../
    else
	echo "instal makefile-gen"
    fi

    sys_install htop

    if test $fake -eq 0; then
	rm -rvf ../installation
    fi
else
    script_header "3/20] INSTALLATION DE PYTHON3"
    read -p "Installer python3 ? [O/n]" yn
    case $yn in
	[Nn]* );;
	* )
	    sys_install python3
	    ;;
    esac
    
    script_header "4/20] INSTALLATION DE EMACS ET DU SYSTÈME DE HEADERS EPITECH"
    read -p "Installer et configurer emacs ? [O/n/c(onfig)]" yn
    case $yn in
	[Nn]* );;
	[Cc]* )
	    setup_emacs;;
	* )
	    sys_install emacs
	    setup_emacs
	    ;;
    esac
    
    script_header "5/20] INSTALLATION DE GCC"
    read -p "Installer GCC ? [O/n]" yn
    case $yn in
	[Nn]* );;
	* )
	    sys_install gcc
	    ;;
    esac
    
    script_header "6/20] INSTALLATION DE BUILD-ESSENTIAL POUR LA COMPILATION"
    read -p "Installer Build-Essential ? [O/n]" yn
    case $yn in
	[Nn]* );;
	* )
	    sys_install build-essential
	    ;;
    esac
    
    script_header "7/20] INSTALLATION DE VALGRIND"
    read -p "Installer Valgrind ? [O/n]" yn
    case $yn in
	[Nn]* );;
	* )
	    sys_install valgrind
	    ;;
    esac
    
    script_header "8/20] INSTALLATION DE OCAML"
    read -p "Installer OCAML ? [O/n]" yn
    case $yn in
	[Nn]* );;
	* )
	    sys_install ocaml
	    ;;
    esac
    
    script_header "9/20] INSTALLATION DE LA LIBNCURSES"
    read -p "Installer ncurses ? [O/n]" yn
    case $yn in
	[Nn]* );;
	* )
	       sys_install libncurses5
	       ;;
    esac
    
    script_header "10/20] INSTALLATION DE CURL"
    read -p "Installer curl ? [O/n]" yn
    case $yn in
	[Nn]* );;
	* )
	    sys_install curl
	    ;;
    esac
    
    script_header "11/20] INSTALLATION DE GIT"
    read -p "Installer Git ? [O/n]" yn
    case $yn in
	[Nn]* );;
	* )
	    sys_install git
	    ;;
    esac
    
    script_header "12/20] CLE SSH, LEAVE EVERYTHING AS DEFAULT"
    read -p "Générer une clef SSH pour BLIH ? [O/n]" yn
    case $yn in
	[Nn]* );;
	* )
	    if test $fake -eq 0; then
		ssh-keygen
		handle_error $?
	    else
		echo "ssh keygen"
	    fi

	    script_header "BLIH SSH UPLOAD" $C_YELLOW
	    if test $fake -eq 0; then
		echo "mot de passe UNIX (bocal, pour blih)"
		blih -u "$1" sshkey upload /home/$USER/.ssh/id_rsa.pub
		handle_error $?
	    else
		echo "key upload"
	    fi
	    ;;
    esac
    
    script_header "13/20] INSTALLATION DE ZSH"
    read -p "Installer ZSH pour un plus grand confort dans le shell ? [O/n]" yn
    case $yn in
	[Nn]* )
	    if test $fake -eq 0; then
		echo "alias blih='blih -u $1'" >> /home/$USER/.bashrc
		echo "alias ns_auth='ns_auth -u $1'" >> /home/$USER/.bashrc
	    fi
	    ;;
	* )
	    sys_install zsh
	    if test $fake -eq 0; then
		echo "alias blih='blih -u $1'" >> /home/$USER/.zshrc
		echo "alias ns_auth='ns_auth -u $1'" >> /home/$USER/.zshrc
	    fi
	    
	    script_header "INSTALLATION DE OH-MY-ZSH" $C_YELLOW
	    read -p "Installer Oh My Zsh pour toujours plus de confort ? [O/n]" yn
	    case $yn in
		[Nn]* );;
		* )
		    if test $fake -eq 0; then
			curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh > oh-my-zsh.sh
			sed -i "s:env zsh:exit:g" oh-my-zsh.sh
			chmod 755 oh-my-zsh.sh
			./oh-my-zsh.sh
			rm oh-my-zsh.sh
			#no error check here: remote install.sh has a chsh error
			chsh $USER -s /usr/bin/zsh
			handle_error $?
		    else
			echo "install oh-my-zsh"
		    fi
		    ;;
	    esac
	    ;;
    esac
    
    
    script_header "14/20] INSTALLATION DU MAN DE GOOGLE"
    read -p "Installer le man de google ? [O/n]" yn
    case $yn in
	[Nn]* );;
	* )
	    if test $fake -eq 0; then
		sudo cp $files/google.1 /usr/share/man/man1/google.1
		handle_error $?
	    else
		echo "install man google"
	    fi
	    ;;
    esac
    
    script_header "15/20] INSTALLATION DE TERMINATOR"
    read -p "Installer terminator (émulateur de terminal) ? [O/n]" yn
    case $yn in
	[Nn]* );;
	* )
	    sys_install terminator
	    ;;
    esac
    
    script_header "16/20] INSTALLATION DES OUTILS COMPLEMENTAIRES"
    read -p "Installer tree et filezilla ? [O/n]" yn
    case $yn in
	[Nn]* );;
	* )
	    sys_install tree
	    sys_install filezilla
	    ;;
    esac
    
    script_header "17/20] CHANGEMENT DES DROITS (-) SUR POWEROFF ET REBOOT"
    read -p "Ajouter poweroff et reboot ? [O/n]" yn
    case $yn in
	[Nn]* );;
	* )
	    if test $fake -eq 0; then
		sudo chmod +s /sbin/poweroff
		handle_error $?
		sudo chmod +s /sbin/reboot
		handle_error $?
	    else
		echo "poweroff & reboot"
	    fi
	    ;;
    esac
    
    script_header "18/20] INSTALLATION DE MAKEFILE-GEN"
    read -p "Installer makefile-gen pour générer vos makefiles ? [O/n]" yn
    case $yn in
	[Nn]* );;
	* )
	    sys_install ruby
	    if test $fake -eq 0; then
		git clone https://github.com/kayofeld/makefile-gen.git
		cd makefile-gen
		sudo ./install.sh
		cd ../
	    else
		echo "install makefile-gen"
	    fi
	    ;;
    esac
    
    script_header "19/20] INSTALLATION DE HTOP"
    read -p "Installer htop pour avoir un top plus pratique ? [O/n]" yn
    case $yn in
	[Nn]* );;
	* )
	    sys_install htop
	    ;;
    esac
    
    script_header "20/20] EFFACEMENT DES FICHIERS D'INSTALLATION"
    read -p "Effacer les fichiers d'installation ? [O/n]" yn
    case $yn in
	[Nn]* );;
	* )
	    if test $fake -eq 0; then
		rm -rvf ../installation
	    fi
	    ;;
    esac
fi

if test $reboot -eq 1; then
    script_header "REDEMARRAGE"
    read -p "Redémarrer maintenant pour appliquer la mise à jour du système ? [O/n]" yn
    case $yn in
	[Nn]* );;
	* )
	    if test $fake -eq 0; then
		sudo reboot
	    else
		echo "reboot"
	    fi
	    ;;
    esac
fi

sudo -k
